// Code generated by sqlc. DO NOT EDIT.
// source: easymm.sql

package query

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (steam_id, user_id) VALUES($1, $2)
RETURNING id, steam_id, user_id
`

type CreatePlayerParams struct {
	SteamID string `json:"steam_id"`
	UserID  int32  `json:"user_id"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.SteamID, arg.UserID)
	var i Player
	err := row.Scan(&i.ID, &i.SteamID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users DEFAULT VALUES
RETURNING id, created_at
`

func (q *Queries) CreateUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, steam_id, user_id FROM players
WHERE id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(&i.ID, &i.SteamID, &i.UserID)
	return i, err
}

const getPlayerBySteamID = `-- name: GetPlayerBySteamID :one
SELECT id, steam_id, user_id FROM players
WHERE steam_id = $1
`

func (q *Queries) GetPlayerBySteamID(ctx context.Context, steamID string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerBySteamID, steamID)
	var i Player
	err := row.Scan(&i.ID, &i.SteamID, &i.UserID)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
